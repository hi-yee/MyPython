# 字典是Python中的唯一映射，映射是数学上的一个术语，指两个元素之前相互对应，
# 映射类型区别于序列类型，序列类型以数组的形式存储，通过索引的方式来获取相应位置的值
# 一般索引值与存储的的数据毫无关系。

"""
创建字典和访问字典的方式

"""
# 第一种
a = dict(one = 1,tow = 2,three = 3)

# 第二种
b = {'one':1,'tow':2,'three':3}

# 第三种
c = dict(zip(['one','tow','three'],[1,2,3]))

# 第四种
d = dict([('one',2),('tow',2),('three',3)])

# 第五种
e = dict({'three':3,'tow':2,'one':1})


"""
各种内置方法
"""

"""
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1.fromkeys()方法
用于创建并返回一个新的字典，它的参数有两个，第一个参数是字典的键， 
第二个参数是可选的，是传入键对应的值。如果不提供，那么默认是None

 dict1.fromkeys((1,2,3))
{1: None, 2: None, 3: None}

 dict2.fromkeys((1,2,3),'himan')
{1: 'himan', 2: 'himan', 3: 'himan'}
需要注意的是：fromkeys()方法并不会将 'himan','hhhh','haha' 分别赋值键1,2,3，因为fromkeys()把他当成一个值了
dict2.fromkeys((1,2,3),('himan','hhhh','haha'))
{1: ('himan', 'hhhh', 'haha'), 2: ('himan', 'hhhh', 'haha'), 3: ('himan', 'hhhh', 'haha')}
"""

dict1 = {}
print(dict1.fromkeys((1,2,3),'himan'))



"""
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2. keys()、 values()、 items()
keys()方法， 用于返回字典中的键，
value()方法， 用于返回字典中所有的值
items()方法， 用于返回字典中所有键值对，也就是返回每一项
"""
dict2 = {}
dict2 = dict2.fromkeys(range(31),'赞')
print(dict2.keys())
print(dict2.values())
print(dict2.items())
print(dict2[30])
# 备注: 字典可以很大，当不知道提供的项是否哦存在字典中，如果不存在的时候，Python会报错
"""
Traceback (most recent call last):
  File "E:/PycharmProjects/untitled1/hi_man/py_24 字典.py", line 65, in <module>
    print(dict2[33])
KeyError: 33
"""
# print(dict2[33])



"""
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
3. get()
get()方法， 提供了更宽松的访问字典项，当键不存在的时候， get()方法，并不会报错，只会默默返回一个None，表示并没有找到
"""
print(dict2.get(34,'找不到啊'))
# 如果不知道一个键是否存在于字典中，  可以使用成员资格操作符（in  或者  not in ）来判断
print(33 in dict2)
print(33  not in dict2)


# setdefault() 方法和 get()方法点相似， 但是setdefault() 字典中找不到相应的键时会自动添加：

a2 = {'name':'小明','age':18,'phone':13720170077}
print(a2.setdefault('name'))
print(a2.setdefault('性别'))

#  清除字典的两种方法
# 方法一： 可以使用变量名赋值为一个字典的方法来清空字典，这样做存在一定的弊端。
one = {'第一个':12,'第二个':'nihao'}
tow = one
one = {}
print(one)
print(tow)
# 方法二： 使用clear() 方法
one = {'a':1,'b':2,'c':4}
tow = one
one.clear()
print(one)
print(tow)

"""
4. copy()方法，  复制字典
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
aa = {'name':'小明','age':18,'phone':13720170077}
bb = aa.copy()
print(bb)





"""
5. pop()、popitem()
pop()方法是给定键弹出对应的值，
popitem()方法是弹出一个项
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
a1 ={'name':'小明','age':18,'phone':13720170077}
a1.pop('age')
print(a1)
a1.popitem()
print(a1)

"""
6. update()
方法，可以利用它来更新字典
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
pets = {'米奇':'老鼠','汤姆':'猫','小白':'猪'}
print(pets)
pets.update(小白='狗')
print(pets)


# Python收集方式，一共有两种，一种是以元组的形式打包，另一种以字典的形式打包：

# 用两个 ** 表示，两个（ ** ）表示将参数们打包成字典的形式，
def test( ** params):
    print("有%d 个参数" %len(params))
    print("他们分别是：",params)
test(a= 1,b=2,s=5,d=5)

# 当参数带有两个星号（**）时，传递函数的任何个 key=value 实参会打包进一个字典中，
# 那么有打包就会有解包，来看一下的列子：
cc={'aa':22,'bb':443}
test(** cc)