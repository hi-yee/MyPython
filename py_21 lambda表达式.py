"""
Python允许 lambda 关键字来创建 匿名函数



如下： 定义一个普通的函数
"""
def ds(x):
    return 2 * x +1

print(ds(5))
# 如果在一个内部函数里（funY（）就是这个内部函数），多外部作用域（但不是在全局作用域）的变量进行引用（x就是被引用的变量，
# x在外部作用域。funX函数中，但不在全局作用域里），则这个内部函数（funX），就是一个闭包
"""
如果使用 lambda 语句来定义这个函数，就会变成这样子：
"""
# python de lambda 表达式的语法非常精简，基本语法的在冒号（：）左边放原函数的参数， 可以有多个参数，用逗号隔开（，）
# 冒号右边是返回值。 lambda 语句实际上返回的是一个函数对象， 如果要对它进行使用，只需要进行简单的赋值操作即可
# 单个参数
a = lambda x : 2 * x + 1
print(a(56))
#
# 多个参数
# 简单版
def add(x,y):
    return  x + y
print(add(3,56))
# 把它转换成lambda 表达式

b = lambda x,y: x + y

print(b(5,56))
"""
lambda 表达式的作用
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1、 Python写一些执行脚本时，使用lambda就可以省下定义函数过程，比如说我们只是需要写个简单的脚本来管
理服务器时间，我们就不需要专门定义一个函数然后再写调用，使用lambda就可以使得代码更加精简。

2、 对于一些比较抽象并且整个程序执行下来只需要调用一两次的函数，有时候给函数起个名字也是比较头疼的问题，使用lambda就不需要考虑命名的问题了。

3、简化代码的可读性，由于普通的席丝函数阅读经常要跳到开头def定义部分，使用lambda函数可以省去这样的步骤。

"""


"""
两个牛逼的内建函数   filter()  和  map()

"""
#  1 、 filter(function or None,iterable)  -----过滤器，通过过滤可以保留你所关注的信息，把不需要的东西丢掉。
help(filter)
# filter() 有两个参数。  第一个参数 可以是一个函数也可以是None，
# 如果是一个参数的话， 则将第二个可迭代数据里的每一个元素作为函数的参数进行计算，把返回为True的值筛选出来；
# 如果第一个参数为None 的话，则直接将第二个参数中为True的值筛选出来。
temp = filter(None,[1,2,0,False,True])
print(list(temp))

# 利用filter() 尝试写一个奇数的过滤器
def odd(x):
    return x % 2
temp = filter(odd,range(10))
print(list(temp))

# 使用lambda 表达式简化代码

print(list(filter(lambda x:x % 2,range(20))))


# 2 、 map（） 映射， map() 这个内置函数有两个参数，第一个是函数，第二个是可迭代序列。
# 将序列的每一个元素作为函数的参数进行运算加工， 直到可迭代序列每一个元素都加工完毕，
# 返回所有加工后的元素构成的新序列。

print(list(map(lambda x:2*x,range(10))))