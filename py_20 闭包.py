"""
闭包 是函数式编程的一个重要的语法结构， 函数式编程是一种编程范式，  著名的编程语言就是lisp 语言。
lisp语言： 主要应用于绘图和人工只能， 一直被认为是天才程序员使用的语言。

Python 中闭包从表表现形式上定义为：

如果在一个内部函数里，对在外部作用域（但不是再全局作用域）的变量进行引用， 那么内部函数就会被认为是闭包


如以下的代码块：
"""
def funX(x):
    def funY(y):
        return x * y
    return funY
i = funX(5)
i(5)
print(i)
print(funX(8)(5))
# 如果在一个内部函数里（funY（）就是这个内部函数），多外部作用域（但不是在全局作用域）的变量进行引用（x就是被引用的变量，
# x在外部作用域。funX函数中，但不在全局作用域里），则这个内部函数（funX），就是一个闭包
"""
需要注意是：因为闭包的概念就是由内部函数而来，所以不能在外部函数外的地方对内部函数进行调用，以下的做法就是错误的：
"""
# funY(5)


"""
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""

"""
内嵌函数

Python的函数定义是可以嵌套的， 也就说允许在函数内部创建另一个函数， 这个函数叫做内嵌函数或者内部函数
"""

# #这个报错信息跟之前讲解全局变量的时候基本一样,Python认为在内部函数的x是局部
# 变量的时候，外部函数的x就被屏蔽了起来，所以执行x *= x的时候,在右边根本就找不到
# 局部变量x的值，因此报错。
# 在Python3以前并没有直接的解决方案，只能间接地通过容器类型来存放，因为容器类
# 型不是放在栈里,所以不会被“屏蔽”掉。容器类型这个词儿大家是不是似曾相识?之前介
# 绍的字符串、列表、元组，这些啥都可以往里的放的就是容器类型。于是可以把代码改造
# 如下:
"""
def fun1():
    x = 6
    def fun2():
        x *= x
        return x
    return fun2()

print(fun1())
"""





def fun1():
    x = [6]
    def fun2():
        x[0] *= x[0]
        return x
    return fun2

print(fun1()())


# 到了Python3的世界里,有了不少的改进。如果希望在内部函数里可以修改外部函数里
# 的局部变量的值,那么也有一个关键字可以使用，就是nonlocal,使用方式跟global一样:
def fun1():
    x = 5
    def fun2():
        nonlocal x
        x *= x
        return x
    return fun2

print(fun1()())


