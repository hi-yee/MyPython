"""
一 、 创建函数用关键字  def
语法格式 def + 函数名称 + ():
注意，函数名后的一对小括号（）  是必不可少的
还有小冒号 ： 也要记得加上去啊

调用函数也是非常的方便， 直接写出函数的名称即可

"""

def MyFristFunction():
    print('好高兴啊，学会怎么创建函数了')
    print('这是我的第一个函数')
    print('hi 小小瞒 你真棒啊！\n')

MyFristFunction()

# 加入我想把刚才的内容打印三次， 那么只需要调用函数三次 即可

for i in range(3):
    MyFristFunction()

#  函数的参数,单个参数
def MyFristFunction(name):
    print(name + '你最棒了')

MyFristFunction('小小瞒')

# 传递多个参数
def add(num1, num2):
    print(num1 + num2)
add(1,12580)

# 函数返回值
def add1(num1, num2):
    return (num1 + num2)
add1(1,12580)


#  二 、 形参和实参（形式参数和实际参数），形参是指 创建函数和定义过程中小括号()里面的参数，
#  而实参则指的是 函数在被调用的过程中传递进来 的参数
#  如 以下的代码中，’name‘  是形参，代表一个位置，一个变量名  而 ’小小瞒‘ 是实参，一个具体的内容，是赋值到变量名中的值
def MyFristFunction(name):
    print(name + '你最棒了')

MyFristFunction('小小瞒')


#  三 、 函数文档
# 函数中的注释 可以通过特殊的属性 __doc__获取， （注：__doc__ 两边分别是两条下划线）
def exchangeRate(dollar):
    '''
    美元-> 人命币
    汇率暂定为6.5
    :param dollar:
    :return: 美元
    '''
    return dollar * 6.5

print(exchangeRate(10))

print(exchangeRate.__doc__)

print.__doc__


#  三 、 关键字参数
# 普通的参数叫做 位置参数，  关键字参数其实就是在传入实参指定形参的变量名，尽管使用这种技巧要多打一些字，但是
# 随着程序规模越来越大、采纳数越来越多、参数越来越多，关键字参数起到的作用就越明显。

def saySomething(name,word):
    print(name + '->' + word)
saySomething('小小瞒','你真棒啊')
saySomething(word='你是一个小仙女',name='小小瞒')


#  四 、  默认参数
def Something(name='小小瞒',word='你是一个小仙女'):
    print(name,word)
# 调用函数的时候，并没有传递参数，但是函数并没有报错，因为在定义函数的时候，添加的默认参数
Something()
Something('江小白','你是一个小胖子')


'''
关键字参数和，默认参数的区别
1、 使用默认参数，可以不带参数去掉用函数
2、 关键字参数是在函数调用的时候， 通过参数名指定赋值的参数，这样就不怕因为该不清楚参数的顺序而导致函数调用出错
3、 默认参数是在参数定义的过程中，为形参附=赋初值，当函数调用的是，不传递实参，则默认使用形参初始值代替
'''

#  五 、 收集参数
# 大多数的时候它被称作  可变参数  ，发明这种机制的动机是函数的作者，有时候不知道这个函数到底需要多少个参数，
# 这种时候，仅需要在参数前边加上星号（*）即可：
def test(*params):
    print('有 %d 个参数' % len(params))
    print('第三个参数是:', params[2])
test(1,5,56,568,656,)
test('小麦米',252322,'哈哈镜','小狐狸')

def test1(*params,extra):
    print('收集参数是:',params)
    print('位置参数是:', extra)
# 下面调用参数会报错，没有指定形参extra的值
# test1(1,3,5,7,9,11)
# 收集参数和其他参数一起用的时候，其他参数应该使用  关键字参数来调用函数
test1(1,3,5,7,9,11,extra='这个是其他参数，调用的时候需要用关键字参数的方式')

# 如果在使用收集参数后面 还需要指定其他参数，在调用函数的时候就应该在使用关键参数来指定，
# 否者Python 就都会把你的实参都列入收集参数的范畴


# 如果你的参数中带有收集参数，那么可以将其他的参数设置成默认参数，这样子不容易出错
def test1(*params,extra='小仙女'):
    print('收集参数是:',params)
    print('位置参数是:', extra)
# 下面调用参数会报错，没有指定形参extra的值
# test1(1,3,5,7,9,11)
# 收集参数和其他参数一起用的时候，其他参数应该使用  关键字参数来调用函数
test1(1,3,5,7,9,11,555,5,555)


# 如果需要将一个 列表a 传入 test 参数的收集参数 *param中， 那么调用test(a)时便会会出错，
# 此时需要在 a 前面加个星号（*），表示实参需要 解包  之后 ，才能用
def test2(*param):
    print('有 %d 个参数：' % len(param))
    print('第二个参数是：',param[1])

a = [1,3,5,7,9,11]
# 直接将列表名 a 作为实参将会报错
# test2(a)
# 实参前面添加 * 星号，表示解包
test2(* a)


# Python收集方式，一共有两种，一种是以元组的形式打包，另一种以字典的形式打包：

# 用两个 ** 表示，两个（ ** ）表示将参数们打包成字典的形式，
def test( ** params):
    print("有%d 个参数" %len(params))
    print("他们分别是：",params)
test(a= 1,b=2,s=5,d=5)

# 当参数带有两个星号（**）时，传递函数的任何个 key=value 实参会打包进一个字典中，
# 那么有打包就会有解包，来看一下的列子：
cc={'aa':22,'bb':443}
test(** cc)