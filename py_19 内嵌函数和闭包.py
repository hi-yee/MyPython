"""
global 关键字
全局变量的作用域是整个模块（整个代码段），也就是代码段内所有的函数内部都可以访问到全局变量。
但是要注意一点，在函数内部仅仅去访问全局变量就好，不要试图去修改它。

因为那样的话，Pythonh会使用屏蔽的方式“保护” 全局变量，一旦函数内部试图修改全局变量，Python就会在函数内自动创建一个
名字一模一样的局部变量，这样修改的结果只会修改到局部变量，而不会影响到全局变量。
如以下的代码块：
"""
count = 5
def myfun():
    count = 250
    print(count)
myfun()
print('这个是全局变量count',count)
"""
毕竟人是要灵活应变的，假设你已经完全了解在函数中修改全局变量可能会导致程序可读性变差，出现莫名其妙的bug，代码的维护成本提交，
但你还是坚持“虚心接受，死性不改” 这八字原则，任然觉得有必要在函数中，去修改这个全局变量，
那么不妨试试使用 global 关键字来修改全部变量
如以下的代码块：
"""
count1 = 5
def myfun():
    global count1
    count1 = 5255
    print(count1)
myfun()
print('这个是全局变量count',count1)

"""
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""

"""
内嵌函数

Python的函数定义是可以嵌套的， 也就说允许在函数内部创建另一个函数， 这个函数叫做内嵌函数或者内部函数
"""

def fun1():
    print('fun1正在被调用，，，')
    def fun2():
        print("fun2函数正在被调用。。。")
    fun2()
fun1()

#  关于内部函数的使用， 有一个比较值得注意的地方， 就是内部函数 整个作用域都在外部函数之内。
# 就像上面的例子， fun2()整个函数的作用于都在fun1() 里边。

#  需要注意的地方是， 除了在fun1()这个函数中 可以随意调用fun2()这个内部函数外，
# fun()1

